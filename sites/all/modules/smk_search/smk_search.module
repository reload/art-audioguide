<?php
/**
 * @file
 * Code for the smk_search feature.
 */

include_once 'smk_search.features.inc';

/**
 * Implements hook_init().
 */
function smk_search_init() {
  // Add JavaScript dependencies for the Number-Pad.
  drupal_add_js(drupal_get_path('module', 'smk_search') . '/numberpad.js', array('type' => 'file'));
}

/**
 * Implements hook_menu().
 */
function smk_search_menu() {
  // Make a path that accepts an argument which we will use
  // as a contextual filter for result-views lists.
  $items['search'] = array(
    'title' => 'Search',
    'page callback' => 'smk_search_results_view',
    'access arguments' => array('access content'),
    'page arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['search/%'] = array(
    'title' => 'Search',
    'page callback' => 'smk_search_results_view',
    'access arguments' => array('access content'),
    'page arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function smk_search_theme($existing, $type, $theme, $path) {
  // An array containing custom template information.
  $template = array(
    'number_search' => array(
      'template' => 'template/number-search',
    ),
    'string_search' => array(
      'template' => 'template/string-search',
    ),
  );
  return $template;
}

/**
 * Custom view for the search-result page.
 */
function smk_search_results_view($query = NULL) {

  // Get and render form.
  $form = drupal_get_form('smk_search_form');
  $output = drupal_render($form);

  // Define blocks.
  $names = array(
    'search-title',
    'search-artist',
  );

  // Initialize each block & render them.
  foreach ($names as $name) {
    $block = module_invoke('views', 'block_view', $name);
    if (!empty($block['content'])) {
      $output .= '<h2 class="category">' . $block['subject'] . '</h2>';
      $output .= render($block['content']);
    }
  }

  // Return content.
  return $output;
}

/**
 * Custom search form.
 */
function smk_search_form($form, &$form_state) {
  // We add a text-field & a submit-button.
  $form['query'] = array(
    '#type' => 'textfield',
    '#title' => '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('_smk_search_form_submit'),
  );
  return $form;
}

/**
 * Custom submit handler.
 */
function _smk_search_form_submit($form, &$form_state) {
  // We don't actually want to process the input, but rather
  // just redirect it as an argument to the "search page".
  $form_state['redirect'] = 'search/' . $form_state['values']['query'];
}

/**
 * Implements hook_form_alter().
 */
function smk_search_form_alter(&$form, &$form_state, $form_id) {
  // Check which page we're on (scope).
  switch (strtolower(arg(0))) {
    // Check if we're on the number-search page.
    case 'number-search':
      // Get the exposed form.
      if ($form_id == 'views_exposed_form') {
        // Get the url search parameter & get the search ID.
        $get = drupal_get_query_parameters();
        $piece_id = !empty($get['id']) ? $get['id'] : NULL;

        // Append the number-search template after the "real form".
        $form['#suffix'] = theme('number_search', array(
          'intro' => t('Enter the artworks number.'),
          'example' => t('For example'),
          'infoPanelHeadline' => t('Search result for'),
          'pieceId' => $piece_id,
          'help' => l('<i class="icon--info-2"></i> ' . t('Help. How do I use this?'), '<front>', array('html' => TRUE)),
        ));
      }
      break;
    // Check if we're on the "string search" page.
    case 'search':
      if ($form_id == 'smk_search_form') {
        // Change the submit-button value to be a loupe icon.
        $form['submit']['#value'] = 'î˜Š';

        // Append the search-headline template before the form.
        $form['#prefix'] = theme('string_search', array(
          'headline' => t('Search among all artworks'),
          'help' => t('Enter artist or title of the artwork'),
        ));
      }
      break;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function smk_search_views_query_alter(&$view, &$query) {
  // Look through each view.
  switch ($view->name) {
    // Check if we're on the "Views: search".
    case 'search':
      // Since we use a contextual filter to get the query-string, we then
      // have to alter the query to be a "LIKE" comparison instead of "equal to".
      foreach ($query->where[0]['conditions'] as $delta => &$condition) {
        if ($condition['field'] == 'field_data_title_field.title_field_value' || $condition['field'] == 'node_field_data_field_artist__field_data_title_field.title_field_value') {
          $condition['value'] = '%' . $condition['value'] . '%';
          $condition['operator'] = 'LIKE';
        }
      }
      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function smk_search_views_pre_render(&$view) {
  // Check which view is getting rendered.
  switch ($view->name) {
    // The number-pad search.
    case 'number_search':
      // If we only have 1 results -> redirect to that result.
      if (count($view->result) == 1) {
        drupal_goto('node/' . $view->result[0]->nid);
      }
      break;
  }
}
