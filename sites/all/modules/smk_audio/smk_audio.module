<?php
/**
 * @file
 * Code for the smk_audio feature.
 */

include_once 'smk_audio.features.inc';

/**
 * Implements hook_init().
 */
function smk_audio_init() {
  // Include the SMK mediaelement file if this module is enabled.
  drupal_add_js(drupal_get_path('module', 'smk_audio') . '/smk-mediaelement-settings.js', array('weight' => 1));
}

/**
 * Implements hook_ds_fields_info().
 */
function smk_audio_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    // A unordered list of different social media.
    $fields['node']['social_media_list'] = array(
      'title' => t('Social Media List'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'smk_audio_social_media_list',
      'ui_limit' => array('audio|*'),
    );
    // The duration of a sound.
    $fields['node']['sound_duration'] = array(
      'title' => t('The duration of the sound'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_sound_duration',
      'ui_limit' => array('audio|*'),
    );
    // Get the artist of a sound.
    $fields['node']['sound_artist'] = array(
      'title' => t('Artist'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_artist',
      'ui_limit' => array('audio|*'),
    );
    // Get the inventory ID of an artist.
    $fields['node']['sound_piece_id'] = array(
      'title' => t('Piece ID'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_piece_id',
      'ui_limit' => array('audio|*'),
    );
  }

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }

  return;
}

/**
 * Returns an unordered list with share-functionality.
 */
function smk_audio_social_media_list($field) {
  // Facebook.
  $items[] = <<<EOT
    <div id="fb-root"></div>
    <script>(function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/da_DK/sdk.js#xfbml=1&version=v2.0";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>

    <div class="fb-share-button" data-type="button"></div>
EOT;

  // Twitter.
  $items[] = <<<EOT
    <a href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
EOT;

  // Mail.
  $items[] = l(
    '<i class="fa fa-envelope"></i> ' . t('E-mail'),
    'mailto:',
    array(
      'html' => TRUE,
      'query' => array(
        'subject' => $field['entity']->title,
        'body' => url('node/' . $field['entity']->nid, array('absolute' => TRUE)),
      ),
    )
  );

  return theme('item_list', array(
    'items' => $items,
    'attributes' => array(
      'class' => 'social-media',
    ),
  ));
}

/**
 * Return the duration of a sound.
 */
function _smk_audio_sound_duration($field) {
  // Wrap the sound entity.
  $wrapper = entity_metadata_wrapper('node', $field['entity']->nid);
  // Wrap the file.
  $file = entity_metadata_wrapper('file', $wrapper->field_audio_file->value()['fid']);
  // Get duration.
  $duration = $file->field_duration->value();

  // Check if the combined duration includes "hours".
  if (gmdate('H', $duration) == '00') {
    return gmdate('i:s', $duration);
  } else {
    return gmdate('H:i:s', $duration);
  }
}

/**
 * Return the artist of a sound.
 *
 * @TODO Camilla, how to wrap a single field?.
 */
function _smk_audio_artist($field) {
  // Wrap the sound entity.
  $sound = entity_metadata_wrapper('node', $field['entity']->nid);
  // Wrap the piece entity.
  $piece = entity_metadata_wrapper('node', $sound->field_piece_ref->value());
  // Wrap the artist entity.
  $artist = $piece->field_artist->value();
  // Return the artist name.
  return $artist->title;
}

/**
 * Return the artwork/piece ID of a sound.
 */
function _smk_audio_piece_id($field) {
  // Wrap the sound entity.
  $sound = entity_metadata_wrapper('node', $field['entity']->nid);
  // Wrap the piece entity.
  $piece = entity_metadata_wrapper('node', $sound->field_piece_ref->value());
  // Return the piece ID.
  return $piece->field_piece_id->value();
}

/**
 * Implements hook_file_insert().
 */
function smk_audio_file_insert($file) {
  // Check if it's an audio-file we're uploading.
  if ($file->type == 'audio') {
    // Require php script: "mp3 class".
    require_once libraries_get_path('mp3file') . '/mp3file.class.php';
    // Get the meta-data of the mp3 file.
    $mp3 = new mp3file($file->uri);
    $metadata = $mp3->get_metadata();
    // Set the duration.
    $wrapper = entity_metadata_wrapper('file', $file->fid);
    $wrapper->field_duration->set($metadata['Length']);
    $wrapper->save();
  }
}
