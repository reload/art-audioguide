<?php
/**
 * @file
 * Code for the smk_audio feature.
 */

include_once 'smk_audio.features.inc';

/**
 * Implements hook_init().
 */
function smk_audio_init() {
  // Include the SMK mediaelement file if this module is enabled.
  drupal_add_js(drupal_get_path('module', 'smk_audio') . '/smk-mediaelement-settings.js', array('weight' => 1));
}

/**
 * Implements hook_ds_fields_info().
 */
function smk_audio_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    // A unordered list of different social media.
    $fields['node']['social_media_list'] = array(
      'title' => t('Social Media List'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'smk_audio_social_media_list',
      'ui_limit' => array('audio|*'),
    );
    // The duration of a sound.
    $fields['node']['sound_duration'] = array(
      'title' => t('The duration of the sound'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_sound_duration',
      'ui_limit' => array('audio|*'),
    );
    // Get the artist of a sound.
    $fields['node']['sound_artist'] = array(
      'title' => t('Artist'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_artist',
      'ui_limit' => array('audio|*'),
    );
    // Get the inventory ID of an artist.
    $fields['node']['sound_piece_id'] = array(
      'title' => t('Piece ID'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_piece_id',
      'ui_limit' => array('audio|*'),
    );
    // Get the name of a sound's route.
    $fields['node']['sound_route_name'] = array(
      'title' => t('Route name'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_route_name',
      'ui_limit' => array('audio|*'),
    );
    // Get the previous / next track's links as buttons.
    $fields['node']['sound_next_prev_tracks'] = array(
      'title' => t('Next / Prev track buttons'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_next_prev_tracks',
      'ui_limit' => array('audio|*'),
    );
  }

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }

  return;
}

/**
 * Returns a string with sharing-functions.
 */
function smk_audio_social_media_list($field) {
  // The current URL.
  $url = url('node/' . $field['entity']->nid, array('absolute' => TRUE));

  // Define array to implode.
  $output = array();

  // Mail.
  $output[] = l(
    '',
    'mailto:',
    array(
      'html' => TRUE,
      'query' => array(
        'subject' => $field['entity']->title,
        'body' => $url,
      ),
      'attributes' => array(
        'class' => 'icon--mail-3',
      ),
    )
  );

  // Facebook.
  $output[] = l(
    '',
    'https://www.facebook.com/sharer/sharer.php?u=' . $url,
    array(
    'attributes' => array(
      'class' => 'icon--facebook-2',
      'target' => '_blank',
    ),
  ));

  return t('Share this artwork:') . ' ' . implode(' ', $output);
}

/**
 * Return the duration of a sound.
 */
function _smk_audio_sound_duration($field) {
  // Wrap the sound entity.
  $wrapper = entity_metadata_wrapper('node', $field['entity']->nid);
  // Wrap the file.
  $file = entity_metadata_wrapper('file', $wrapper->field_audio_file->value()['fid']);
  // Get duration.
  $duration = $file->field_duration->value();

  // Check if the combined duration includes "hours".
  if (gmdate('H', $duration) == '00') {
    return gmdate('i:s', $duration);
  } else {
    return gmdate('H:i:s', $duration);
  }
}

/**
 * Return the artist of a sound.
 */
function _smk_audio_artist($field) {
  // Wrap the sound entity.
  $sound = entity_metadata_wrapper('node', $field['entity']->nid);
  // Wrap the piece entity.
  $piece = entity_metadata_wrapper('node', $sound->field_piece_ref->value());
  // Wrap the artist entity.
  $artist = $piece->field_artist->value();
  // Return the artist name.
  return $artist->title;
}

/**
 * Return the artwork/piece ID of a sound.
 */
function _smk_audio_piece_id($field) {
  // Wrap the sound entity.
  $sound = entity_metadata_wrapper('node', $field['entity']->nid);
  // Wrap the piece entity.
  $piece = entity_metadata_wrapper('node', $sound->field_piece_ref->value());
  // Return the piece ID.
  return $piece->field_piece_id->value();
}

/**
 * Implements hook_file_insert().
 */
function smk_audio_file_insert($file) {
  // Check if it's an audio-file we're uploading.
  if ($file->type == 'audio') {
    // Require php script: "mp3 class".
    require_once libraries_get_path('mp3file') . '/mp3file.class.php';
    // Get the meta-data of the mp3 file.
    $mp3 = new mp3file($file->uri);
    $metadata = $mp3->get_metadata();
    // Set the duration.
    $wrapper = entity_metadata_wrapper('file', $file->fid);
    $wrapper->field_duration->set($metadata['Length']);
    $wrapper->save();
  }
}

/**
 * Return the Route name of a sound.
 *
 * @TODO Fetch route-id dynamically.
 */
function _smk_audio_route_name($field) {
  // Route ID.
  $route_id = 75;
  $route = node_load($route_id);
  $route = entity_metadata_wrapper('node', $route);

  // Return the name of the sounds route.
  return $route->title->value();
}

/**
 * Return two buttons (prev / next track).
 * ---
 * @TODO dynamically fetch route ID.
 */
function _smk_audio_next_prev_tracks($field) {
  // Node id.
  $nid = $field['entity']->nid;

  // Route ID.
  $routeId = 75;

  // Get references from the DB.
  $query = db_select('field_data_field_audio_ref', 'ref')
    ->fields('ref', array('delta', 'field_audio_ref_target_id'))
    ->condition('ref.entity_id', $routeId, '=')
    ->execute();

  // Loop through the results/referenced sounds.
  foreach ($query as $route) {
    $targetId = $route->field_audio_ref_target_id;
    $delta = $route->delta;

    // If the first delta is the current sound, then skip "previous".
    if ($delta == 0 && $nid == $targetId) {
      $setPrevious = True;
    }
    // If the current sound doesn't match the reference & we haven't looped
    // over the current sound yet, set new value for "$previous".
    else if ($nid != $targetId && !isset($setPrevious)) {
      $previous = $targetId;
    }
    // We reached the current sound, and we should therefor stop defining
    // a new "previous".
    else if ($nid == $targetId && !isset($setPrevious)) {
      $setPrevious = True;
    }
    // We passed the current sound & the next reference will be our "next" id.
    else if ($nid != $targetId && $setPrevious == True && !isset($next)) {
      $next = $targetId;
    }
  }

  // Define output array.
  $output = array();

  // If there is a "previous sound".
  if (isset($previous)) {
    $output[] = l(
      t('Previous'),
      url('node/' . $previous, array('absolute' => True)),
      array(
        'attributes' => array(
          'class' => array(
            'track-navigation',
            'previous'
          ),
        ),
      )
    );
  }

  // If there is a "next sound".
  if (isset($next)) {
    $output[] = l(
      t('Next'),
      url('node/' . $next, array('absolute' => True)),
      array(
        'attributes' => array(
          'class' => array(
            'track-navigation',
            'next'
          ),
        ),
      )
    );
  }

  // Return the two links/buttons.
  return implode('', $output);
}
