<?php
/**
 * @file
 * Code for the smk_audio feature.
 */

include_once 'smk_audio.features.inc';

/**
 * Implements hook_init().
 */
function smk_audio_init() {
  // Include the SMK mediaelement file if this module is enabled.
  drupal_add_js(drupal_get_path('module', 'smk_audio') . '/js/smk-mediaelement-settings.js', array('weight' => 1));
}

/**
 * Implements hook_ds_fields_info().
 */
function smk_audio_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    // A unordered list of different social media.
    $fields['node']['social_media_list'] = array(
      'title' => t('Social Media List'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'smk_audio_social_media_list',
      'ui_limit' => array('audio|default'),
    );
    // The duration of a sound.
    $fields['node']['sound_duration'] = array(
      'title' => t('The duration of the sound'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_sound_duration',
      'ui_limit' => array(
        'audio|teaser',
        'audio|search_result',
        'audio|route_context',
      ),
    );
    // Get the artist of a sound.
    $fields['node']['sound_artist'] = array(
      'title' => t('Artist'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_artist',
      'ui_limit' => array('audio|*'),
    );
    // Get the inventory ID of an artist.
    $fields['node']['sound_piece_id'] = array(
      'title' => t('Piece ID'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_piece_id',
      'ui_limit' => array('audio|*'),
    );
    // Get the title and prev/next links for a specific sound on a route.
    $fields['node']['sound_mediaplayer_metadata'] = array(
      'title' => t('Mediaplayer Metadata'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_mediaplayer_metadata',
      'ui_limit' => array('audio|default'),
    );
    // Return the image of the referenced piece/artwork.
    $fields['node']['sound_piece_image'] = array(
      'title' => t('Piece image'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_piece_image',
      'ui_limit' => array('audio|default'),
    );
    // Other sounds from piece.
    $fields['node']['sounds_from_piece'] = array(
      'title' => t('Other sounds from this piece'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => '_smk_audio_sounds_from_piece',
      'ui_limit' => array('audio|default'),
    );
  }

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }

  return;
}

/**
 * Returns a string with sharing-functions.
 */
function smk_audio_social_media_list($field) {
  // The current URL.
  $url = url('node/' . $field['entity']->nid, array('absolute' => TRUE));

  // Define array to implode.
  $output = array();

  // Mail.
  $output[] = l(
    '',
    'mailto:',
    array(
      'html' => TRUE,
      'query' => array(
        'subject' => $field['entity']->title,
        'body' => $url,
      ),
      'attributes' => array(
        'class' => 'icon--mail-3',
      ),
    )
  );

  // Facebook.
  $output[] = l(
    '',
    'https://www.facebook.com/sharer/sharer.php?u=' . $url,
    array(
    'attributes' => array(
      'class' => 'icon--facebook-2',
      'target' => '_blank',
    ),
  ));

  return t('Share this artwork:') . ' ' . implode(' ', $output);
}

/**
 * Return the duration of a sound.
 */
function _smk_audio_sound_duration($field) {
  // Wrap the sound entity.
  $wrapper = entity_metadata_wrapper('node', $field['entity']->nid);
  // Wrap the file.
  $file = $wrapper->field_audio_file->value();
  $file = entity_metadata_wrapper('file', $file['fid']);
  // Get duration.
  $duration = $file->field_duration->value();

  // Check if the combined duration includes "hours".
  if (gmdate('H', $duration) == '00') {
    return gmdate('i:s', $duration);
  } else {
    return gmdate('H:i:s', $duration);
  }
}

/**
 * Return the artist of a sound.
 */
function _smk_audio_artist($field) {
  $sound = entity_metadata_wrapper('node', $field['entity']);
  $piece = entity_metadata_wrapper('node', $sound->field_piece_ref->value());
  if (!empty($piece) && isset($piece->field_artist)) {
    return $piece->field_artist->value()->title;
  }
  return t('Unknown');

}

/**
 * Return the artwork/piece ID of a sound.
 */
function _smk_audio_piece_id($field) {
  // Get the nid of the referenced piece.
  $piece = field_get_items('node', $field['entity'], 'field_piece_ref');
  // If there is a piece.
  if (!empty($piece)) {
    // Get the nid & load+wrap the node to get the "Inventory ID".
    $current = current($piece);
    $node = node_load($current['target_id']);
    $wrap = entity_metadata_wrapper('node', $node);
    return $wrap->field_piece_id->value();
  }
  return 0;
}

/**
 * Implements hook_file_insert().
 */
function smk_audio_file_insert($file) {
  // Check if it's an audio-file we're uploading.
  if ($file->type == 'audio') {
    // Require php script: "mp3 class".
    require_once libraries_get_path('mp3file') . '/mp3file.class.php';
    // Get the meta-data of the mp3 file.
    $mp3 = new mp3file($file->uri);
    $metadata = $mp3->get_metadata();
    // Set the duration.
    $wrapper = entity_metadata_wrapper('file', $file->fid);
    $wrapper->field_duration->set($metadata['Length']);
    $wrapper->save();
  }
}

/**
 * Return metadata for the mediaplayer.
 */
function _smk_audio_mediaplayer_metadata($field) {
  // Get the URL query-string.
  $get = drupal_get_query_parameters(NULL, array('q'));

  if (empty($get['route'])) {
    return;
  }

  $route_nid = $get['route'];

  // Current audio node id.
  $current_audio_nid = $field['entity']->nid;

  // Get the route from context.
  $route = entity_metadata_wrapper('node', node_load($route_nid));

  // Loop through the results/referenced sounds.
  $total_sounds = 0;
  $current_delta = 0;
  foreach ($route->field_audio_ref->value() as $delta => $audio) {
    // Add 1 to the total amount of sounds that's referenced.
    $total_sounds++;

    // If the first delta is the current sound, then skip "previous".
    if ($delta == 0 && $current_audio_nid == $audio->nid) {
      $setPrevious = TRUE;
      $current_delta = $delta;
    }
    // If the current sound doesn't match the reference & we haven't looped
    // over the current sound yet, set new value for "$previous".
    elseif ($current_audio_nid != $audio->nid && !isset($setPrevious)) {
      $previous = $audio->nid;
    }
    // We reached the current sound, and we should therefor stop defining
    // a new "previous".
    elseif ($current_audio_nid == $audio->nid && !isset($setPrevious)) {
      $setPrevious = TRUE;
      $current_delta = $delta;
    }
    // We passed the current sound & the next reference will be our "next" id.
    elseif ($current_audio_nid != $audio->nid && $setPrevious == TRUE && !isset($next)) {
      $next = $audio->nid;
    }
  }

  // Define output array.
  $output = array();

  // The route title.
  $items[] = t('Route: !title', array(
    '!title' => $route->title->value(),
  ));

  // The current route "position": X out of X.
  $items[] = t('!current out of !total', array(
    // The delta is 0-based index, so we add 1.
    '!current' => intval($current_delta + 1),
    '!total' => $total_sounds,
  ));

  // Return the list with title information.
  $output[] = theme('item_list', array(
    'items' => $items,
    'attributes' => array(
      'class' => 'audio-title',
    ),
  ));

  // If there is a "previous sound".
  if (isset($previous)) {
    $output[] = l(
      t('Previous'),
      'node/' . $previous,
      array(
        'attributes' => array(
          'class' => array(
            'track-navigation',
            'previous'
          ),
        ),
        'query' => array(
          'route' => $route_nid,
        ),
      )
    );
  }

  // If there is a "next sound".
  if (isset($next)) {
    $output[] = l(
      t('Next'),
      'node/' . $next,
      array(
        'attributes' => array(
          'class' => array(
            'track-navigation',
            'next'
          ),
        ),
        'query' => array(
          'route' => $route_nid,
        ),
      )
    );
  }

  // Return the metadata.
  return implode('', $output);
}

/**
 * Return the image of the referenced piece/artwork.
 */
function _smk_audio_piece_image($field) {

  $sound = entity_metadata_wrapper('node', $field['entity']);
  $piece = entity_metadata_wrapper('node', $sound->field_piece_ref->value());
  if (!empty($piece) && isset($piece->field_image)) {
    $image = $piece->field_image->value();
    // Return the image (with an image style).
    return theme('image', array(
      'path' => image_style_url('large', $image['uri']),
    ));
  }
  // No image - no output.
  return;
}

/**
 * Show other sounds that are about the same artwork as we are on.
 */
function _smk_audio_sounds_from_piece($field) {

  $sound = entity_metadata_wrapper('node', $field['entity']);
  $piece_nid = $sound->field_piece_ref->raw();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'audio')
    // Exclude the node we are currently on.
    ->entityCondition('entity_id', $field['entity']->nid, '!=')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_piece_ref', 'target_id', $piece_nid, '=');
  $result = $query->execute();

  if (!isset($result['node'])) {
    return '';
  }

  $render_arr = node_view_multiple(node_load_multiple(array_keys($result['node'])), 'teaser');
  // Wrap the output in a foldout box.
  return theme('foldout_box', array(
    'title' => t('Other audio clips about this piece'),
    'content' => render($render_arr)
  ));
}

/**
 * Implements hook_entity_info_alter().
 */
function smk_audio_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['route_context'] = array(
    'label' => t('In route context'),
    'custom settings' => TRUE,
  );
}

/**
 * Define layouts from code.
 *
 * @return $layouts
 *   A collection of layouts.
 */
function smk_audio_ds_layout_info() {
  $layouts = array(
    'audio_2col' => array(
      'label' => t('Audio 2 col'),
      'path' => drupal_get_path('module', 'smk_audio') . '/layouts/audio_2col',
      'image' => TRUE,
      'regions' => array(
        'audio_2col_thumbnail' => t('Thumbnail'),
        'audio_2col_title' => t('Title'),
        'audio_2col_content' => t('Content'),
      ),
    ),
  );

  return $layouts;
}
