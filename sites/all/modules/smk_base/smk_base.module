<?php
/**
 * @file
 * Code for the smk_base feature.
 */

include_once 'smk_base.features.inc';

/**
 * Implements hook_init().
 */
function smk_base_init() {
  // Include language js on front end only. Also leave logged in users alone.
  if (!path_is_admin(current_path()) && !user_is_logged_in() && drupal_multilingual()) {
    drupal_add_library('system', 'jquery.cookie');
    $js = <<<JS
var c = document.cookie.match(new RegExp('ag-language=([^;]+)'));
if (null == c && '/choose-lang' != window.location.pathname) {
  window.location = '/choose-lang';
}
JS;
    drupal_add_js($js,
      array(
        // This is a trick.. A constant should be used here, but we REALLY want
        // to go first.
        'group' => -200,
        'type' => 'inline',
      )
    );
    drupal_add_js(drupal_get_path('module', 'smk_base') . '/js/language.js');
  }

  // Include the FitVids library.
  drupal_add_js(libraries_get_path('fitvids') . '/jquery.fitvids.js');
  drupal_add_js(drupal_get_path('module', 'smk_base') . '/js/fitvids.js');

  // Add stylesheet if we're on any admin pages.
  if (path_is_admin(current_path())) {
    // This stylesheet will overwrite the css-background for menu icons.
    drupal_add_css(drupal_get_path('module', 'smk_base') . '/css/menu_icons_reset.css');
  }
}

/**
 * Implements hook_menu().
 */
function smk_base_menu() {
  $items = array();
  if (drupal_multilingual()) {
    $items['choose-lang'] = array(
      'title' => 'Choose language',
      'access callback' => TRUE,
      'page callback' => 'smk_base_choose_lang',
      'type' => MENU_CALLBACK,
    );
  }
  return $items;
}

/**
 * Menu callback that displays a language chooser.
 */
function smk_base_choose_lang() {
  // Get links for enabled languages.
  $links = language_negotiation_get_switch_links('language', '<front>');
  if (isset($links->links)) {
    $variables = array('links' => $links->links);
    return theme('links', $variables);
  }
}

  /**
 * Implements hook_block_info().
 */
function smk_base_block_info() {
  $return = array();

  $return['icon_menu'] = array(
      'info' => t('Smk base: Icon menu'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'status' => 1,
      'region' => 'header',
      'weight' => 1,
  );

  $return['toggle_menu'] = array(
    'info' => t('Smk base: Toggle menu'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => 1,
    'region' => 'header',
    'weight' => 2,
  );

  return $return;
}

/**
 * Implements hook_block_view().
 */
function smk_base_block_view($delta = '') {
  $block = array();

  switch ($delta) {

    case 'icon_menu':
      $block['subject'] = '';
      $block['content'] = smk_base_icon_menu();
      break;

    case 'toggle_menu':
      $block['subject'] = '';
      $block['content'] = smk_base_toggle_menu();
      break;
  }

  return $block;
}

/**
 * Custom function to handle the icon-block content.
 */
function smk_base_icon_menu() {
  $links = array();

  // Admin icon.
  if (user_access('access administration pages')) {
    $links[] = l('', 'admin', array('attributes' => array('class' => array('admin-link', 'menu', 'fa', 'fa-cog'))));
  }
  // Search icon.
  $links[] = l('', 'search', array('attributes' => array('class' => array('menu', 'icon--search'))));
  // Number icon.
  $links[] = l('', 'number-search', array('attributes' => array('class' => array('menu', 'icon--listen-2'))));
  // Burger icon.
  $links[] = <<<EOD
<label for="menu-toggle"></label>
<input id="menu-toggle" type="checkbox">
EOD;

  // Render item-list.
  return theme('item_list', array('items' => $links, 'attributes' => array('class' => array('icon-menu'))));
}

/**
 * Block view rendering of the burger menu content.
 */
function smk_base_toggle_menu() {
  $main_menu = module_invoke('system', 'block_view', 'main-menu');

  $output = '';
  if (drupal_multilingual()) {
    $language_links = module_invoke('locale', 'block_view', 'language');
    $output .= '<h4>' . $language_links['subject'] . '</h4>';
    $output .= $language_links['content'];
  }

  $output .= '<h4>' . t('Go to') . '</h4>';
  $output .= render($main_menu['content']);
  return $output;
}

/**
 * Implements hook_ds_fields_info().
 */
function smk_base_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    $fields['node']['attached_block'] = array(
      'title' => t('Attached block'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'smk_base_attached_block',
      'ui_limit' => array('generic_page|full'),
    );
  }

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }

  return;
}

/**
 * DS field callback.
 *
 * Show block with extra info if relevant.
 *
 * @param array $field
 *   The context for the field.
 */
function smk_base_attached_block($field) {
  $block_ref = field_get_items($field['entity_type'], $field['entity'], 'field_block_ref');
  // If the 'attached block' field is empty, then just return.
  if (empty($block_ref) || empty($block_ref[0]['value'])) {
    return '';
  }

  // Find the module that 'owns' the block we want to render.
  $module = FALSE;
  switch ($block_ref[0]['value']) {
    case 'routes-block':
      $module = 'views';
      break;

    case 'menu-front-page-menu':
      $module = 'menu';
      break;

    case 'artworks-block':
      $module = 'views';
      break;
  }

  $output = '';
  // If we don't know the delta, then no block will be rendered.
  if (FALSE != $module) {
    // Invoke the module with the block delta.
    $block = module_invoke($module, 'block_view', $block_ref[0]['value']);
    if (!empty($block['content'])) {
      // Render the content.
      $output = render($block['content']);
    }
  }
  return $output;
}

/**
 * Implements hook_theme().
 */
function smk_base_theme($existing, $type, $theme, $path) {
  return array(
    'foldout_box' => array(
      'variables' => array(
        'title' => NULL,
        'content' => NULL,
      ),
      'template' => 'templates/foldout-box'
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function smk_base_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'menu_edit_item' && isset($form['icon'])) {
    $form['icon']['image_style']['#options'] = smk_base_get_allowed_menu_icon_styles();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function smk_base_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['menu'])) {
    $form['menu']['icon']['image_style']['#options'] = smk_base_get_allowed_menu_icon_styles();
  }
}

/**
 * Helper to get allowed image styles for menu icons.
 *
 * @return array
 *   Allowed image styles.
 */
function smk_base_get_allowed_menu_icon_styles() {
  return array(
    'small_tile' => t('Small tile'),
    'large_tile' => t('Large tile'),
  );
}
